# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.BuildBenchmarks.benchmarkCompileAll

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 31960.449 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.SSPerformanceBenchmarks.benchmarkHSSFPerformance

# Run progress: 10.00% complete, ETA 00:06:56
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 750.585 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.SSPerformanceBenchmarks.benchmarkSXSSFPerformance

# Run progress: 20.00% complete, ETA 00:03:59
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 2968.199 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.SSPerformanceBenchmarks.benchmarkXSSFPerformance

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 2883.354 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.TestBenchmarks.benchmarkTestExcelant

# Run progress: 40.00% complete, ETA 00:02:17
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 18665.738 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 3 hr per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.TestBenchmarks.benchmarkTestIntegration

# Run progress: 50.00% complete, ETA 00:02:02
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 411205.666 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.TestBenchmarks.benchmarkTestMain

# Run progress: 60.00% complete, ETA 00:06:04
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 59520.473 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.TestBenchmarks.benchmarkTestOOXML

# Run progress: 70.00% complete, ETA 00:04:25
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 78617.461 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.TestBenchmarks.benchmarkTestOOXMLLite

# Run progress: 80.00% complete, ETA 00:02:57
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: 9863.889 ms/op


# JMH version: 1.37
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9
# VM invoker: /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64/bin/java
# VM options: -Xmx16m
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.poi.benchmark.suite.TestBenchmarks.benchmarkTestScratchpad

# Run progress: 90.00% complete, ETA 00:01:21
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
Iteration   1: <failure>

java.io.IOException: Log-Tail: 
Log: M V EI: org.apache.poi.hemf.record.emf.HemfDraw$EmfPolyBezier.getBounds() may expose internal representation by returning HemfDraw$EmfPolyBezier.bounds  At HemfDraw.java:[line 205]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfSetPixel.getPoint() may expose internal representation by returning HwmfDraw$WmfSetPixel.point  At HwmfDraw.java:[line 541]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfSetPixel.getColorRef() may expose internal representation by returning HwmfDraw$WmfSetPixel.colorRef  At HwmfDraw.java:[line 537]
    Log: M V EI: org.apache.poi.hsmf.extractor.OutlookTextExtractor.getMAPIMessage() may expose internal representation by returning OutlookTextExtractor.msg  At OutlookTextExtractor.java:[line 83]
    Log: M V EI: org.apache.poi.hsmf.extractor.OutlookTextExtractor.getDocument() may expose internal representation by returning OutlookTextExtractor.msg  At OutlookTextExtractor.java:[line 210]
    Log: M V EI2: new org.apache.poi.hsmf.extractor.OutlookTextExtractor(MAPIMessage) may expose internal representation by storing an externally mutable object into OutlookTextExtractor.msg  At OutlookTextExtractor.java:[line 51]
    Log: M V EI: org.apache.poi.hsmf.extractor.OutlookTextExtractor.getFilesystem() may expose internal representation by returning OutlookTextExtractor.msg  At OutlookTextExtractor.java:[line 225]
    Log: M V EI2: new org.apache.poi.hwpf.converter.WordToHtmlConverter(HtmlDocumentFacade) may expose internal representation by storing an externally mutable object into WordToHtmlConverter.htmlDocumentFacade  At WordToHtmlConverter.java:[line 104]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfComment$EmfCommentDataMultiformats.getBounds() may expose internal representation by returning HemfComment$EmfCommentDataMultiformats.bounds  At HemfComment.java:[line 481]
    Log: M V EI2: new org.apache.poi.hpbf.dev.PLCDumper(HPBFDocument) may expose internal representation by storing an externally mutable object into PLCDumper.doc  At PLCDumper.java:[line 41]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfText$WmfSetTextColor.getColorRef() may expose internal representation by returning HwmfText$WmfSetTextColor.colorRef  At HwmfText.java:[line 134]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfDraw$EmfPolyDraw.getBounds() may expose internal representation by returning HemfDraw$EmfPolyDraw.bounds  At HemfDraw.java:[line 1020]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFTitleMaster.getTextParagraphs() may expose internal representation by returning HSLFTitleMaster._paragraphs  At HSLFTitleMaster.java:[line 51]
    Log: M V EI: org.apache.poi.hemf.draw.HemfImageRenderer.getGenericRecord() may expose internal representation by returning HemfImageRenderer.image  At HemfImageRenderer.java:[line 135]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfWindowing$WmfScaleWindowExt.getScale() may expose internal representation by returning HwmfWindowing$WmfScaleWindowExt.scale  At HwmfWindowing.java:[line 385]
    Log: M V EI2: new org.apache.poi.hslf.dev.SlideShowRecordDumper(PrintStream, String, boolean, boolean) may expose internal representation by storing an externally mutable object into SlideShowRecordDumper.ps  At SlideShowRecordDumper.java:[line 106]
    Log: M B CT: Exception thrown in class org.apache.poi.hslf.record.InteractiveInfoAtom at new org.apache.poi.hslf.record.InteractiveInfoAtom(byte[], int, int) will leave the constructor. The object under construction remains partially initialized and may be vulnerable to Finalizer attacks.  At InteractiveInfoAtom.java:[line 158]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfRoundRect.getCorners() may expose internal representation by returning HwmfDraw$WmfRoundRect.corners  At HwmfDraw.java:[line 591]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfRoundRect.getBounds() may expose internal representation by returning HwmfDraw$WmfRoundRect.bounds  At HwmfDraw.java:[line 595]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfWindowing$WmfOffsetClipRgn.getOffset() may expose internal representation by returning HwmfWindowing$WmfOffsetClipRgn.offset  At HwmfWindowing.java:[line 494]
    Log: M V EI: org.apache.poi.hemf.record.emfplus.HemfPlusMisc$EmfPlusSetClipRect.getClipRect() may expose internal representation by returning HemfPlusMisc$EmfPlusSetClipRect.clipRect  At HemfPlusMisc.java:[line 358]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfWindowing$WmfOffsetWindowOrg.getOffset() may expose internal representation by returning HwmfWindowing$WmfOffsetWindowOrg.offset  At HwmfWindowing.java:[line 325]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfFill$EmfInvertRgn.getBounds() may expose internal representation by returning HemfFill$EmfInvertRgn.bounds  At HemfFill.java:[line 419]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfFill$EmfInvertRgn.getRgnRects() may expose internal representation by returning HemfFill$EmfInvertRgn.rgnRects  At HemfFill.java:[line 423]
    Log: M D DLS: Dead store to rgnDataSize in org.apache.poi.hemf.record.emf.HemfFill$EmfInvertRgn.init(LittleEndianInputStream, long, long)  At HemfFill.java:[line 408]
    Log: M V EI: org.apache.poi.hemf.record.emfplus.HemfPlusDraw$EmfPlusFillRects.getRectData() may expose internal representation by returning HemfPlusDraw$EmfPlusFillRects.rectData  At HemfPlusDraw.java:[line 320]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfFill$EmfStretchDiBits.getBounds() may expose internal representation by returning HemfFill$EmfStretchDiBits.bounds  At HemfFill.java:[line 298]
    Log: M V EI: org.apache.poi.hwpf.extractor.Word6Extractor.getFilesystem() may expose internal representation by returning Word6Extractor.doc  At Word6Extractor.java:[line 143]
    Log: M V EI: org.apache.poi.hwpf.extractor.Word6Extractor.getDocument() may expose internal representation by returning Word6Extractor.doc  At Word6Extractor.java:[line 128]
    Log: M V EI2: new org.apache.poi.hwpf.extractor.Word6Extractor(HWPFOldDocument) may expose internal representation by storing an externally mutable object into Word6Extractor.doc  At Word6Extractor.java:[line 76]
    Log: M V EI: org.apache.poi.hdgf.extractor.VisioTextExtractor.getFilesystem() may expose internal representation by returning VisioTextExtractor.hdgf  At VisioTextExtractor.java:[line 140]
    Log: M V EI: org.apache.poi.hdgf.extractor.VisioTextExtractor.getDocument() may expose internal representation by returning VisioTextExtractor.hdgf  At VisioTextExtractor.java:[line 125]
    Log: M V EI2: new org.apache.poi.hdgf.extractor.VisioTextExtractor(HDGFDiagram) may expose internal representation by storing an externally mutable object into VisioTextExtractor.hdgf  At VisioTextExtractor.java:[line 45]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFHyperlink.getInfo() may expose internal representation by returning HSLFHyperlink.info  At HSLFHyperlink.java:[line 55]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFHyperlink.getTextRunInfo() may expose internal representation by returning HSLFHyperlink.txinfo  At HSLFHyperlink.java:[line 59]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFHyperlink.getExHyperlink() may expose internal representation by returning HSLFHyperlink.exHyper  At HSLFHyperlink.java:[line 51]
    Log: M V EI2: new org.apache.poi.hslf.usermodel.HSLFComment(Comment2000) may expose internal representation by storing an externally mutable object into HSLFComment._comment2000  At HSLFComment.java:[line 31]
    Log: M V EI2: new org.apache.poi.hslf.usermodel.HSLFSlide(Slide, HSLFNotes, SlideListWithText$SlideAtomsSet, int, int) may expose internal representation by storing an externally mutable object into HSLFSlide._notes  At HSLFSlide.java:[line 77]
    Log: M V EI2: org.apache.poi.hslf.usermodel.HSLFSlide.setNotes(Notes) may expose internal representation by storing an externally mutable object into HSLFSlide._notes  At HSLFSlide.java:[line 128]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFSlide.getTextParagraphs() may expose internal representation by returning HSLFSlide._paragraphs  At HSLFSlide.java:[line 244]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFSlide.getNotes() may expose internal representation by returning HSLFSlide._notes  At HSLFSlide.java:[line 116]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfFill$WmfPatBlt.getBounds() may expose internal representation by returning HwmfFill$WmfPatBlt.bounds  At HwmfFill.java:[line 449]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfWindowing$WmfSetViewportOrg.getOrigin() may expose internal representation by returning HwmfWindowing$WmfSetViewportOrg.origin  At HwmfWindowing.java:[line 83]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfArc.getEndPoint() may expose internal representation by returning HwmfDraw$WmfArc.endPoint  At HwmfDraw.java:[line 696]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfArc.getStartPoint() may expose internal representation by returning HwmfDraw$WmfArc.startPoint  At HwmfDraw.java:[line 692]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfArc.getBounds() may expose internal representation by returning HwmfDraw$WmfArc.bounds  At HwmfDraw.java:[line 700]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfWindowing$WmfOffsetViewportOrg.getOffset() may expose internal representation by returning HwmfWindowing$WmfOffsetViewportOrg.offset  At HwmfWindowing.java:[line 178]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfFill$EmfStretchBlt.getBounds() may expose internal representation by returning HemfFill$EmfStretchBlt.bounds  At HemfFill.java:[line 203]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfFill$EmfStretchBlt.getXFormSrc() may expose internal representation by returning HemfFill$EmfStretchBlt.xFormSrc  At HemfFill.java:[line 207]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfFill$EmfStretchBlt.getBkColorSrc() may expose internal representation by returning HemfFill$EmfStretchBlt.bkColorSrc  At HemfFill.java:[line 211]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfWindowing$WmfSetWindowOrg.getOrigin() may expose internal representation by returning HwmfWindowing$WmfSetWindowOrg.origin  At HwmfWindowing.java:[line 228]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfEllipse.getBounds() may expose internal representation by returning HwmfDraw$WmfEllipse.bounds  At HwmfDraw.java:[line 261]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfRectangle.getBounds() may expose internal representation by returning HwmfDraw$WmfRectangle.bounds  At HwmfDraw.java:[line 498]
    Log: M V EI2: org.apache.poi.hwpf.model.types.LVLFAbstractType.setRgbxchNums(byte[]) may expose internal representation by storing an externally mutable object into LVLFAbstractType.field_4_rgbxchNums  At LVLFAbstractType.java:[line 258]
    Log: M V EI2: org.apache.poi.hwpf.model.types.LVLFAbstractType.setGrfhic(Grfhic) may expose internal representation by storing an externally mutable object into LVLFAbstractType.field_11_grfhic  At LVLFAbstractType.java:[line 384]
    Log: M V EI: org.apache.poi.hwpf.model.types.LVLFAbstractType.getRgbxchNums() may expose internal representation by returning LVLFAbstractType.field_4_rgbxchNums  At LVLFAbstractType.java:[line 249]
    Log: M V EI: org.apache.poi.hwpf.model.types.LVLFAbstractType.getGrfhic() may expose internal representation by returning LVLFAbstractType.field_11_grfhic  At LVLFAbstractType.java:[line 375]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfMisc$EmfSetWorldTransform.getXForm() may expose internal representation by returning HemfMisc$EmfSetWorldTransform.xForm  At HemfMisc.java:[line 771]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFTextRun.createHyperlink() may expose internal representation by returning HSLFTextRun.link  At HSLFTextRun.java:[line 492]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFTextRun.getCharacterStyle() may expose internal representation by returning HSLFTextRun.characterStyle  At HSLFTextRun.java:[line 75]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFTextRun.getParagraph() may expose internal representation by returning HSLFTextRun.parentParagraph  At HSLFTextRun.java:[line 530]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFTextRun.getHyperlink() may expose internal representation by returning HSLFTextRun.link  At HSLFTextRun.java:[line 483]
    Log: M V EI: org.apache.poi.hslf.usermodel.HSLFTextRun.getTextParagraph() may expose internal representation by returning HSLFTextRun.parentParagraph  At HSLFTextRun.java:[line 449]
    Log: M V EI2: new org.apache.poi.hslf.usermodel.HSLFTextRun(HSLFTextParagraph) may expose internal representation by storing an externally mutable object into HSLFTextRun.parentParagraph  At HSLFTextRun.java:[line 71]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfFill$EmfExtSelectClipRgn.getRgnRects() may expose internal representation by returning HemfFill$EmfExtSelectClipRgn.rgnRects  At HemfFill.java:[line 540]
    Log: M D DLS: Dead store to rgnDataSize in org.apache.poi.hemf.record.emf.HemfFill$EmfExtSelectClipRgn.init(LittleEndianInputStream, long, long)  At HemfFill.java:[line 508]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfFill$WmfDibStretchBlt.getSrcBounds() may expose internal representation by returning HwmfFill$WmfDibStretchBlt.srcBounds  At HwmfFill.java:[line 945]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfFill$WmfDibStretchBlt.getDstBounds() may expose internal representation by returning HwmfFill$WmfDibStretchBlt.dstBounds  At HwmfFill.java:[line 949]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfMisc$WmfSetBkColor.getColorRef() may expose internal representation by returning HwmfMisc$WmfSetBkColor.colorRef  At HwmfMisc.java:[line 169]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfComment$EmfCommentDataBeginGroup.getBounds() may expose internal representation by returning HemfComment$EmfCommentDataBeginGroup.bounds  At HemfComment.java:[line 399]
    Log: M V EI2: new org.apache.poi.hsmf.dev.HSMFDump(POIFSFileSystem) may expose internal representation by storing an externally mutable object into HSMFDump.fs  At HSMFDump.java:[line 38]
    Log: M B CT: Exception thrown in class org.apache.poi.hslf.record.ExOleObjAtom at new org.apache.poi.hslf.record.ExOleObjAtom(byte[], int, int) will leave the constructor. The object under construction remains partially initialized and may be vulnerable to Finalizer attacks.  At ExOleObjAtom.java:[line 198]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfWindowing$WmfSetViewportExt.getExtents() may expose internal representation by returning HwmfWindowing$WmfSetViewportExt.extents  At HwmfWindowing.java:[line 133]
    Log: M V EI2: new org.apache.poi.hwpf.dev.HWPFLister(HWPFDocumentCore) may expose internal representation by storing an externally mutable object into HWPFLister._doc  At HWPFLister.java:[line 275]
    Log: M V EI: org.apache.poi.hemf.record.emf.HemfMisc$EmfSetBrushOrgEx.getOrigin() may expose internal representation by returning HemfMisc$EmfSetBrushOrgEx.origin  At HemfMisc.java:[line 735]
    Log: M V EI: org.apache.poi.hwmf.record.HwmfDraw$WmfMoveTo.getPoint() may expose internal representation by returning HwmfDraw$WmfMoveTo.point  At HwmfDraw.java:[line 79]
    Log: M C UwF: Unwritten field: org.apache.poi.hwmf.record.HwmfMisc$WmfDibCreatePatternBrush.pattern16  At HwmfMisc.java:[line 561]
    Log: M D UuF: Unused public or protected field: org.apache.poi.hwmf.record.HwmfFont.pitch  In HwmfFont.java
    Log: M D UuF: Unused public or protected field: org.apache.poi.hwmf.record.HwmfFont.family  In HwmfFont.java
    Log: M P UrF: Unread field: org.apache.poi.hwmf.record.HwmfEscape$WmfEscapeUnknownData.escapeFunction  At HwmfEscape.java:[line 258]
    Log: M P SS: Unread field: org.apache.poi.hslf.dev.PPTXMLDump.hexHeader; should this field be static?  At PPTXMLDump.java:[line 54]
    Log: M P UrF: Unread field: org.apache.poi.hemf.record.emfplus.HemfPlusObject$EmfPlusObject.objectId  At HemfPlusObject.java:[line 173]
    Log: M D UrF: Unread public/protected field: org.apache.poi.hemf.record.emf.HemfMisc$EmfModifyWorldTransform.header  At HemfMisc.java:[line 806]
    Log: M P UrF: Unread field: org.apache.poi.hmef.HMEFMessage.fileId  At HMEFMessage.java:[line 69]
    Log: M V MS: org.apache.poi.hslf.usermodel.HSLFSimpleShape.ADJUST_VALUES should be package protected  At HSLFSimpleShape.java:[line 65]
    Log: M V MS: org.apache.poi.hwmf.usermodel.HwmfPicture.MAX_RECORD_LENGTH should be package protected  At HwmfPicture.java:[line 59]
    Log: SpotBugs ended with exit code 1
    Log: [Incubating] Problems report is available at: file:///home/centic/poi-benchmark/sources/build/reports/problems/problems-report.html
    Log: FAILURE: Build failed with an exception.
    Log: * What went wrong:
    Log: Execution failed for task ':poi-scratchpad:test'.
    Log: > There were failing tests. See the report at: file:///home/centic/poi-benchmark/sources/poi-scratchpad/build/reports/tests/test/index.html
    Log: * Try:
    Log: > Run with --scan to get full insights.
    Log: Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.
    Log: You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.
    Log: For more on this, please refer to https://docs.gradle.org/8.11.1/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.
    Log: For more on this, please refer to https://docs.gradle.org/8.11.1/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.
    Log: BUILD FAILED in 43s
    Log: 20 actionable tasks: 5 executed, 15 up-to-date
	at org.apache.poi.benchmark.suite.BaseBenchmark.runGradleTarget(BaseBenchmark.java:280)
	at org.apache.poi.benchmark.suite.BaseBenchmark.testScratchpad(BaseBenchmark.java:238)
	at org.apache.poi.benchmark.suite.TestBenchmarks.benchmarkTestScratchpad(TestBenchmarks.java:23)
	at org.apache.poi.benchmark.suite.jmh_generated.TestBenchmarks_benchmarkTestScratchpad_jmhTest.benchmarkTestScratchpad_ss_jmhStub(TestBenchmarks_benchmarkTestScratchpad_jmhTest.java:326)
	at org.apache.poi.benchmark.suite.jmh_generated.TestBenchmarks_benchmarkTestScratchpad_jmhTest.benchmarkTestScratchpad_SingleShotTime(TestBenchmarks_benchmarkTestScratchpad_jmhTest.java:305)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:527)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:504)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.apache.commons.exec.ExecuteException: While executing (sources); bash ./gradlew --no-daemon --console plain :poi-scratchpad:check (Exit value: 1)
	at org.dstadler.commons.exec.ExecutionHelper.execute(ExecutionHelper.java:159)
	at org.dstadler.commons.exec.ExecutionHelper.getCommandResultIntoStream(ExecutionHelper.java:131)
	at org.apache.poi.benchmark.suite.BaseBenchmark.runGradleTarget(BaseBenchmark.java:276)
	... 16 more
Caused by: org.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1)
	at org.apache.commons.exec.DefaultExecutor.executeInternal(DefaultExecutor.java:355)
	at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:253)
	at org.dstadler.commons.exec.ExecutionHelper.execute(ExecutionHelper.java:152)
	... 18 more


# Run complete. Total time: 00:13:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score   Error  Units
BuildBenchmarks.benchmarkCompileAll                  ss        31960.449          ms/op
SSPerformanceBenchmarks.benchmarkHSSFPerformance     ss          750.585          ms/op
SSPerformanceBenchmarks.benchmarkSXSSFPerformance    ss         2968.199          ms/op
SSPerformanceBenchmarks.benchmarkXSSFPerformance     ss         2883.354          ms/op
TestBenchmarks.benchmarkTestExcelant                 ss        18665.738          ms/op
TestBenchmarks.benchmarkTestIntegration              ss       411205.666          ms/op
TestBenchmarks.benchmarkTestMain                     ss        59520.473          ms/op
TestBenchmarks.benchmarkTestOOXML                    ss        78617.461          ms/op
TestBenchmarks.benchmarkTestOOXMLLite                ss         9863.889          ms/op

Benchmark result is saved to build/reports/jmh/results.json
